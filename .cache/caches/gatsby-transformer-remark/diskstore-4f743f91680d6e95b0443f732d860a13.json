{"expireTime":9007200812079118000,"key":"transformer-remark-markdown-html-2426abee01fe8581519a6ebbbde6c42f-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<h1>Tech Stack</h1>\n<p>When starting a new project, be it for a commercial project or a personal one, I’m always presented with the question:</p>\n<blockquote>\n<p><strong>What tech stack do I use for this?</strong></p>\n</blockquote>\n<p>Sometimes it’s a very simple and easy question to answer, <em>”<strong>What you know best</strong>”</em> other times it can be a real challenge and the initial investment in architectural planning can put me off a project.</p>\n<p>When working on my own personal projects I tend to be a bit more exploratory and implement technologies I’m not as familiar with. Do I value my personal time less than my work time, or is it just more fun to learn new things, new ways and at least attempt to keep up to date with the ever increasing pace of JavaScript and web development practices?</p>\n<p>To answer this question I looked at the outcomes I want my backend to deliver.</p>\n<h2>Requirements</h2>\n<ul>\n<li>REST API - <em>Could easily, and probably will in the future, add a GraphQL layer.</em></li>\n<li>Automated testing</li>\n<li>Authentication</li>\n<li>Authorization</li>\n<li>Connects to a database</li>\n</ul>\n<p>That’s a very generic and rather rudimentary set of requirements right? But it gives a good start and besides, every app should be test-able!</p>\n<p>I’ve almost exclusively worked with JavaScript since graduating university and love the language along with its incredible community of dedicated developers, so I chose <strong>NodeJS</strong> to write the server, <strong>ExpressJS</strong> to handle my API endpoints and routing, <strong>MongoDB</strong> as my database and <strong>Mocha w Chai</strong> as my testing framework.</p>\n<p><strong>NodeJS</strong> is a very well supported platform with an incredible number of open source packages, everything from indenting your code to machine learning libraries. This incredible eco-system leaves you with a wealth of packages to choose from that can do pretty much anything, certainly an overwhelming quantity for any newbie. I chose to stick with <strong>v8.13.^</strong> at the time of writing due to package support.</p>\n<h3>Is it important to choose a long term support (LTS) version?</h3>\n<p>Support for <strong>NodeJS</strong> is similar to that of Linux, a distribution or release version is chosen, and scheduled, for long term support and it therefore receives long term support for packages included with the release version and larger packages tend to stick with this support cycle.</p>"}